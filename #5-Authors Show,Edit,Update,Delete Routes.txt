#We cannot put and delete from browser.SO:
npm i method-override

#in server.js:
add:
const methodOverride = require('method-override')

app.use(methodOverride('_method'))

#In authors.js of routes:
//Show all Authors
router.get('/:id',(req,res) => {	//:id means id is a variable
	res.send('Show Author'+req.params.id)
})

//Show options to edit
router.get('/:id/edit',(req,res) => {
	res.send('Edit Author'+req.params.id)
})

//Edit
router.put('/:id',(req,res) => {
	res.send('Update Author'+req.params.id)
})

//Delete
router.delete('/:id',(req,res) => {
	res.send('Delete Author'+req.params.id)
})


#In index.ejs of authors folder:
replace:
<% authors.forEach(author => { %>  
    <div><%= author.name %></div>	
<% }) %>
by:
<% authors.forEach(author => { %>  
    <div><%= author.name %></div>	
    <a href="/authors/<%= author.id %>">View</a>
    <a href="/authors/<%= author.id %>/edit">Edit</a>
    <%- include('../partials/deleteForm',{url:`/authors/${author.id}`}) %>
<% }) %>

#Create a deleteForms.ejs in partials:
<form method="POST" action="<%= url %>?_method=DELETE">
     <button type='submit'>Delete</button>
</form>    //delete should be always a form,bcz we need to set it to POST first then replace by DELETE

#test this by going to 'Authors' link and then all links should show for each author

#author.js in routes
In //Show options to edit:
//Show options to edit
router.get('/:id/edit',async  (req,res) => {
	try{
		const author = await Author.findById(req.params.id)
		res.render('authors/edit',{author:author})
	} catch {
		res.redirect('/authors')
	}
	
})

#In views folder->authors folder create a edit.ejs:
<h2>Edit Author</h2>
<form action="/authors/<%= author.id %>?_method=PUT" method="POST">
	<%- include('_form_fields') %>
	<br>
	<a href="/authors/<%= author.id %>">Cancel</a>           
	<button type="submit">Update</button>   
</form>

#In authors.js of routes:
In //Create author route (above):
uncomment://res.redirect(`authors/${newAuthor.id}`)
delete:res.redirect('authors')

In //EDit below:
//Edit
router.put('/:id',async (req,res) => {
	let author={}
	try{
		author = await Author.findById(req.params.Id)	//Find the author to be edit
		author.name = req.body.name    //Edit the author
		await author.save()		//Save the changes
		res.redirect(`/authors/${author.id}`)
	} catch {
		if(author == null) {		//Error in first await
			res.redirect('/')
		}else{				//Error in second await
			res.redirect('authors/edit',{
				author:author,
				errorMessage:'Error Updating Author!'
			})
		}
	}
})

#SETUP A CONSTRAINT THAT THE AUTHOR WITH A BOOK SAVED IN THE DB CANNOT BE DELETED:

#In author.js of models:
const Book = require('./book')  //In the beginnings

//At the end before models.export:
authorSchema.pre('remove',function(next){      //Before(pre()) 'remove' is done,run a function next()//function(next) is callback as a function next is sent as parameter to the function
	Book.find({author:this.id},(err,books) => {
		if(err){
			next(err)	//If the error is finding the author/book or connect to the db,send that error and prevent from remove'
		} else if(books.length > 0){	//If the author has greater than 0 books,create a new error and prevent from 'remove'
			next(new Error('Cannot remove Author\nThis Author has books in the database!'))
		} else {
			next() //Do absolutely nothing,so 'remove'
		}
	})
})

#NOTE:router.get('/:id'.. ) should always be the end before router.get('/new')
Because as :id is a variable,new will be taken as a variable and executed if on top

#Create a show.ejs in authors folder:for name,edit,delete and all books display;
<h2><%= author.name %></h2>
<a href="/authors/<%= author.id %>/edit">Edit</a>
<%- include('../partials/deleteForm',{url:`/authors/${author.id}`})%>

//booksByAuthor variablename should be same as defined in authors.js under router.get()
<% if(booksByAuthor.length > 0){ %>    //Books should exist for that author
    <% booksByAuthor.forEach(book => { %>
        <img height="150" width="100" src="<%=book.coverImagePath %>"
    <% }) %>
<% } %>


#In authors.js of routes:
add const Book = require('../models/book') in the beginning

In //show all authors add:
//Show all Authors
router.get('/:id',async (req,res) => {
	try{
		const author = await Author.findById(req.params.id)
		const books = await Book.find({author:author.id}).limit(6).exec()  //Show only 6 books
		res.render('authors/show',{
			author:author,
			booksByAuthor:books
	})
}	catch {
			res.redirect('/')
		}
})

 
-------------------------------------------------------------------------------------------------------------------------------------------
#NOTE:id is given of db itself.No need to define id in schema

#NOTE:The await line of code in try block is the one where we expect the error to happend.So write the catch code according to that.

#NOTE:async,await,try,catch go hand in hand

#NOTE:
Book.find({author:this.id},(err,books) => {
		if(err)....
	})

Its an alternative to 
Book.find({author:this.id},aysnc(a,b)=>{
try{
	await....
} catch{
....
}})