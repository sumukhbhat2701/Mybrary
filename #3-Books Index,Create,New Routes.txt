#In the routes folder,create a copy of authors.js and create books.js
change const Author to const Book=require('../models/book')

delete all the content inside router.get and router.post

change the comments of Author to Book

#In the models folder,create a copy of author.js to book.js
replace authorSchema to bookSchema

replace mongoos.model() to mongoose.model('Book',bookSchema)

replace:
name: {
	type: String,
	required: true
}
by:
    title: {
		type: String,
		required: true
    },
    description:{
        type:String
    },
    publishDate:{
        type:Date,
        required:true
    },
    pageCount:{
        type:Number,
        required:true
    },
    createdAt:{
        type:Date,
        required:true,
        default:Date.now
    },
    coverImageName:{
        type:String,
        required:true
    },
    author:{
        type:mongoose.Schema.Types.ObjectId,    //Already in db,i.e Author object 
        required:true,
	ref:'Author'
    }

#In server.js:Add->
const bookRouter=require('./routes/books')

app.use('/books',bookRouter)

#in books.js:
Add res.send('All books'),res.send('New Book'),res.send('Create book') resp

#test by npm run devStart,http://localhost:3000/books,http://localhost:3000/books/new

#In partials folder:header.ejs,add:
            <li><a href="/books">Books</a></li>
            <li><a href="/books/new">Add Book</a></li>

#in views folder,create a books folder,copy the content of new.ejs and create a new.ejs in books folder:
change all author or authors to book or books

#create a _form_fields.ejs even in books:copy the contents from authors folder,and change all the content to:
<div>
<label>Title</label>
<input type="text" name="title"  value="<%= book.title %>">
</div>

<div>
<label>Author</label>    //Author selecting dropdown
<select name="author">
    <% authors.forEach(author => { %>
        <% if(author.id==book.author) {%>    //For Book object books,we dont store author name in author variable,but store id itself
            <option selected label="<%= author.name %>" value="<%= author.id %>"></option>   //set the one with is selected,mark that for further use
        <%} else {%>
            <option label="<%= author.name %>" value="<%= author.id %>"></option>    //deselect if not clicked upon
    <%  } %>
<%  }) %>
</select>
</div>

#In books.js :Make sure both:
const Book=require('../models/book')
const Author = require('../models/author')
are present

in //New book route:
//New Book route->new.ejs in Book
router.get('/new',async (req,res) => {
    try {
        const authors = await Author.find({})
        const book = new Book()
        res.render('books/new',{
            authors:authors,
            book:book
        })
    } catch {
        res.redirect('/books')
    }
})

#Back to _form_fields.ejs:
<div>
<label>Published Date</label>
<input type='date' name='publishDate' value='<%= book.publishDate == null ? '':book.publishDate.toISOString().split('T')[0] %>'>
//split time and date,and consider only date,not time
</div>

<div>
    <label>Publish Date</label>
    <input type="number" name="pageCount" min="1" value="<%= book.pageCount %>">
</div>

<div>
    <label>Cover</label>
    <input type="file" name="cover">
</div>

<div>
    <label>Description</label>
    <textarea name='description'><%= book.description%></textarea>
</div>

#In books.js:
//Create Books route:
//Create new book route->no new file required
router.post('/',async (req,res)=>{   
    const book = new Book({
        title:req.body.title,
        author:req.body.author,
        publishDate:new Date(req.body.publishDate),
        pageCount:req.body.pageCount,
        description:req.body.description
    })
})

#To save the image file for book cover install multer:npm i multer

#In new.ejs:add encytype="multipart/form-data" in form tag
<form action="/books" method="POST" enctype="multipart/form-data">

#In book.js:
const coverImageBasePath = 'upload/bookCovers' //in the beginning

module.exports.coverImageBasePath = coverImageBasePath //at the end

#In the books.js beginning:
const multer= require('multer')

const path= require('path')
const uploadPath = path.join('public',Book.coverImageBasePath)
const imageMimeTypes = ['image/jpeg','image/png','image/gif']

const upload = multer({
    dest:uploadPath,
    fileFilter: (req,file,callback) =>{
        callback(null,imageMimeTypes.includes(file.mimetype))  //null error if it is jpeg/gif/png
    }
})

#In the //Create Book route of books.js:
Write a function to save the book,to avoid repetition of code:
async function renderNewPage(res,book,hasError=false){
    try {
        const authors = await Author.find({})
        const params=
            {
                authors:authors,
                book:book
            }
            if(hasError)
            {
                params.errorMessage='Error creating Book'
            }
            res.render('books/new',params)
    } catch {
        res.redirect('/books')
    }
}

Replace //New book route by the function call:
//New Book route->new.ejs in Book
router.get('/new',async (req,res) => {
    renderNewPage(res, new Book())
})

Add a second parameter to the router.post() in  
//Create new book route->no new file required
router.post('/',upload.single('cover'),async (req,res)=>{       //upload a single file to multer object
    const fileName = req.file!=null ? req.file.filename : null 
    const book = new Book({
        title:req.body.title,
        author:req.body.author,
        publishDate:new Date(req.body.publishDate),    //req.body.publishDate is a string , so we convert into DATE format
        pageCount:req.body.pageCount,
        description:req.body.description,
        coverImageName:fileName
    })
    
    try {
        const newBook = await book.save()
        //res.redirect('books/${newBook.id}')
        res.redirect('books')
    } catch {
        renderNewPage(res,book,true)
    }
})

#the selected images are stored in public\uploads\bookCovers

#Note that even if one of info is not entered,errorMessage is printed
#But the file however saves in the folder,unlike other parameters.

#To remove that effect:In books.js
const fs=require('fs')

In the catch block of //Create new book route:
if(book.coverImageName!=null){
removeBookCover(book.coverImageName)
}
i.e:
//Create new book route->no new file required
router.post('/',upload.single('cover'),async (req,res)=>{  
    const fileName = req.file!=null ? req.file.filename : null 
    const book = new Book({
        title:req.body.title,
        author:req.body.author,
        publishDate:new Date(req.body.publishDate),
        pageCount:req.body.pageCount,
        coverImageName:fileName,
        description:req.body.description
    })
    
    try {
        const newBook = await book.save()
        //res.redirect('books/${newBook.id}')
        res.redirect('books')
    } catch {
        if(book.coverImageName!=null){
            removeBookCover(book.coverImageName)
        }
        renderNewPage(res,book,true)
    }
})


Define the above used function at the end of the file:
function removeBookCover(filename){
	fs.unlink(path.join(uploadPath,fileName),err=>{   //Delete file
		if(err) console.error(err)
	})
}

#Create a index.ejs in books folder like one in authors folder:
<h2>Search Books</h2>
<form action="/books" method="GET">
    <div>
        <label>Title</label>
        <input type="text" name="title"  value="<%= searchOptions.title%>">
    </div>

    <div>
        <label>Published After</label>
        <input type="date" name="publishedAfter"  value="<%= searchOptions.publishedAfter %>">
    </div>

    <div>
        <label>Published Before</label>
        <input type="date" name="publishedBefore"  value="<%= searchOptions.publishedBefore%>">
    </div>

    <button type="submit">Search</button>
</form>

<div>
    <% books.forEach(book => { %>  
        <img height='150' width='100' src='<% book.coverImagePath %>'>   //Show image instaed of name	
    <% }) %>
</div>

#To access book.coverImagePath above,in book.js of models,:
before models.exports..

bookSchema.virtual('coverImagePath').get(function(){
    if(this.coverImageName!=null){
        return path.join('/',coverImageBasePath,this.coverImageName)
    }
})

#In the //All Authors route of books.js:Search Based on title or before a date,or after a date or all(any 1 or 2 is enough)
//All books route->index.ejs in books folder
router.get('/',async (req,res) => {
    let query = Book.find()
    if(req.query.title !=null && req.query.title !='')
    {
        query = query.regex('title',new RegExp(req.query.title,'i'))   //Search based on title of the book
    }
    if(req.query.publishedBefore !=null && req.query.publishedBefore !='')
    {
        query = query.lte('publishDate',req.query.publishedBefore)   //Display All books published lte(less than equals) than given date
    }
    if(req.query.publishedAfter !=null && req.query.publishedAfter !='')
    {
        query = query.gte('publishDate',req.query.publishedAfter)	//Display All books published lte(greater than equals) than given date
    }
    try{
        const books = await query.exec()	//await for the execution(exec) of query=Book.find()
        res.render('books/index',{
            books:books,
            searchOptions:req.query
        })
    } catch{
        res.send(err)
    }
})

#Display recent books in the homepage:Index.ejs of views:
<h2><b>Homepage</b></h2>
<h2>Recently Added</h2>
<div>
    <% books.forEach(book => { %>  
        <img height="150" width="100" src="<%= book.coverImagePath %>">	
    <% }) %>
</div>

#In index.js of routes:DEcending order sort and first 10 recent:
replace router.get() by:
const Book=require('../models/book')

router.get('/',async (req,res)=>{
	let books=[]
	try{
		books=await Book.find().sort({createdAt:'desc'}).limit(10).exec()
	} catch {
		books=[]
	}
	res.render('index',{books:books})
})


#ADD TO GITHUB AND HEROKU:

Add public/uploads in .gitignore

#git add .
#git commit -m "Initial Author Route"
#git push

#git push heroku master

#PROBLEM:The image file wont be saved in heroku server

----------------------------------------------------------------------------------------------------------------------------
NOTE:To print the error in try block:use
try{
...
}
catch(err)
{
	console.log(err) //appears in the cmd or use res.send(err) to appear on the web screen
}

NOTE:
The value attribute is used differently for different input types:

For type="button", "reset", and "submit" - it defines the text on the button
For type="text", "password", and "hidden" - it defines the initial (default) value of the input field
For type="checkbox", "radio", "image" - it defines the value associated with the input (this is also the value that is sent on submit)

The value attribute cannot be used with <input type="file">.

