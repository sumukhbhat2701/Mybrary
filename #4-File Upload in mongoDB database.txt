#SIMPLE FILE UPLOAD (Like pdf) is in the previous file #3

#Heroku doesn't save the files

Using FILEPOND and save in the form of encoded base64 strings:

#In layout.ejs in layouts folder:Add->
1)For filepond setup:
<link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
<script defer src="https://unpkg.com/filepond/dist/filepond.js"></script>

after <meta> tag
SOURCE:https://pqina.nl/filepond/docs/patterns/installation/

2)For image encoding:
<script defer src="https://unpkg.com/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.js"></script>

SOURCE:https://pqina.nl/filepond/docs/patterns/plugins/file-encode/

3)For image preview:
<link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
<script defer src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>

SOURCE:https://pqina.nl/filepond/docs/patterns/plugins/image-preview/

4)For image resize:
<script defer src="https://unpkg.com/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"></script>

SOURCE:https://pqina.nl/filepond/docs/patterns/plugins/image-resize/

5)We add our own script:
<script defer src="/javascripts/fileUpload.js"></script>

NOTE->IN THE SAME ORDER:
<link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
<link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
<script defer src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
<script defer src="https://unpkg.com/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.js"></script>
<script defer src="https://unpkg.com/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"></script>
<script defer src="https://unpkg.com/filepond/dist/filepond.js"></script>
<script defer src="/javascripts/fileUpload.js"></script>

#We add defer to indicate that the line of code should be run only after the entire page is loaded

#In the _form_fields of books folder in the input tag of the file add the attribute:class="filepond"
i.e.
<input type="file" name="cover" class="filepond">

#Create a javascripts folder in public and a fileUpload.js in it:
FilePond.registerPlugin(
    FilePondPluginImagePreview,
    FilePondPluginImageResize,
    FilePondPluginFileEncode
)

FilePond.setOptions({
    stylePanelAspectRatio:150 / 100,
    imageResizeTargetWidth:100,
    imageResizeTargetHeight:150
})
FilePond.parse(document.body);

#In the new.ejs of books folder remove enctype="multipart/form-data",i.e
<form action="/books" method="POST" enctype="multipart/form-data"> 
to 
<form action="/books" method="POST">

#in the books.js of routes:
1)remove multer library i.e remove const multer= require('multer')

2)remove the 2nd parameter of router.post() in //Create Book Route

3)remove:
const upload = multer({
    dest:uploadPath,
    fileFilter: (req,file,callback) =>{
        callback(null,imageMimeTypes.includes(file.mimetype))
    }
})

4)remove:
function removeBookCover(filename){
	fs.unlink(path.join(uploadPath,filename),err=>{  
		if(err) console.error(err)
	})
}

5)remove:
fs library i.e remove const fs=require('fs')

#In the book.js of models:
replace:
coverImageName:{
        type:Buffer,
        required:true
    }

by:
coverImage:{
        type:String,
        required:true
    },
    coverImageType:{
        type:String,
        required:true
    }

6)In catch of //Create New Book remove:
i)      if(book.coverImageName!=null){
            removeBookCover(book.coverImageName)
        }

ii)	coverImageName:fileName,

iii)    const fileName = req.file!=null ? req.file.filename : null 

#In the books.js of routes:
Add a function:

function saveCover(book,coverEncoded){
    if(coverEncoded == null) return
    const cover = JSON.parse(coverEncoded)
    if(cover!=null && imageMimeTypes.includes(cover.type)){
        book.coverImage=new Buffer.from(cover.data,'base64')
        book.coverImageType=cover.type
    }
}

Call the function before try block of //Create Book route:

saveCover(book,req.body.cover)

#In book.js of models:
replace:

bookSchema.virtual('coverImagePath').get(function(){
    if(this.coverImageName!=null){
        return path.join('/',coverImageBasePath,this.coverImageName)
    }
})

by:

bookSchema.virtual('coverImagePath').get(function(){
    if(this.coverImage!=null  && this.coverImageType !=null){
        return `data:${this.coverImageType};charset=utf-8;base64,${this.coverImage.toString('base64'}`  //in `` (2nd row 1st button on keyboard)
    }	//encode image to base64 string
})

#delete uploads folder in public folder

#In books.js of routes:remove...
const path= require('path')

const uploadPath = path.join('public',Book.coverImageBasePath)

#In book.js in models folder:remove...
const path = require('path')
const coverImageBasePath = 'uploads/bookCovers'


At the end,remove:
module.exports.coverImageBasePath = coverImageBasePath

#Save to github and heroku:

#In .gitignore remove:
public/uploads
as the folders are deleted